import streamlit as st
import openai
import os
import json
import re
from pathlib import Path
from datetime import datetime
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

st.set_page_config(page_title="Initialize Wisdom Layer Project", page_icon="üß†")
st.title("üß† Wisdom Layer Project Initialization")

st.markdown("Start by defining the system you'd like to explore using Systems Thinking, Chaos Theory, Karma, and Complexity Sentinel agents.")

# CAS Type Dropdown (new)
cas_options = {
    "Select CAS type": "",
    "IT Organization": "schemas/it_organization.json",
    "Family Structure": "schemas/family_structure.json",
    "Democratic Nation": "schemas/democracy.json"
}
cas_selection = st.selectbox("üìÇ Choose a predefined Complex Adaptive System (CAS) type:", list(cas_options.keys()))

# User input
system_name = st.text_input("üåê What is the name of the system?", placeholder="e.g., IT Organization, U.S. Democracy")
system_purpose = st.text_area("üéØ What is your purpose or intent in modeling this system?", height=100, placeholder="e.g., To understand fragility and feedback loops in our public institutions.")

if st.button("Generate Initial Mental Model"):
    if not system_name or not system_purpose:
        st.warning("Please fill out both fields to continue.")
        st.stop()

    # === Step 1: Load schema if CAS selected ===
    if cas_selection != "Select CAS type":
        schema_path = cas_options[cas_selection]
        try:
            with open(schema_path, "r") as f:
                schema_json = json.load(f)
            top_level_distinctions = schema_json.get("distinctions", [])
            meta_block = {
                "system_name": system_name,
                "purpose": system_purpose,
                "cas_type": cas_selection,
                "notes": "Loaded from schema template"
            }
            st.success("Loaded schema from template.")
        except Exception as schema_err:
            st.error(f"Failed to load schema: {schema_err}")
            st.stop()
    else:
        # === Fallback: Use GPT to generate distinctions ===
        with st.spinner("Calling GPT-4 Turbo to generate system distinctions..."):
            prompt = f"""You are an expert in systems thinking, chaos theory, and cognitive architecture. A user is modeling a complex system with agentic AI (using Systems Thinking, Chaos Theory, Karma, and Complexity Sentinel agents).

System Name: {system_name}
Purpose: {system_purpose}

Please propose an initial set of top-level distinctions (categories of entities) relevant to this system, and a brief metadata block that includes the system name, purpose, and potential blind spots or boundary concerns. Return a JSON object with two keys: 'top_level_distinctions' and 'meta'."""

            try:
                response = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=[
                        {"role": "system", "content": "You are a cognitive systems architect."},
                        {"role": "user", "content": prompt}
                    ]
                )
                result_text = response.choices[0].message.content.strip()
                json_match = re.search(r"```json\n(.*?)```", result_text, re.DOTALL)
                raw_json = json_match.group(1).strip() if json_match else result_text.strip()
                raw_json = raw_json.replace("‚Äú", "\"").replace("‚Äù", "\"").replace("‚Äô", "'")
                result_json = json.loads(raw_json)
                top_level_distinctions = result_json.get("top_level_distinctions", [])
                meta_block = result_json.get("meta", {})
                st.success("Initial model generated by GPT.")
            except Exception as e:
                st.error(f"OpenAI API error: {e}")
                st.stop()

    # === Shared Write Logic ===
    timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    project_slug = system_name.lower().replace(" ", "_")
    project_path = Path(f"cmc/data/{project_slug}_{timestamp}")
    project_path.mkdir(parents=True, exist_ok=True)

    base_model = {key: [] for key in top_level_distinctions}
    with open(project_path / "systems_model.json", "w") as f:
        json.dump(base_model, f, indent=2)

    with open(project_path / "meta.json", "w") as f:
        json.dump(meta_block, f, indent=2)

    if cas_selection == "Select CAS type":
        with open(project_path / "llm_response.txt", "w") as f:
            f.write(result_text)

    st.success(f"üìÅ Project initialized at: {project_path}")
    st.code(json.dumps(base_model, indent=2), language="json")
